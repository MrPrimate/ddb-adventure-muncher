name: MacOS build
on: push

jobs:
  build_with_signing:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      # - name: Install the Apple certificate and provisioning profile
      #   env:
      #     BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      #     P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      #     BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      #   run: |
      #     # create variables
      #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
      #     PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

      #     # import certificate and provisioning profile from secrets
      #     echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
      #     echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

      #     # create temporary keychain
      #     security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH

      #     # import certificate to keychain
      #     security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH

      #     # apply provisioning profile
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    - name: Get Version              # Run the script that returns the version from `module.json`
      shell: bash
      id: get-version
      run: echo "::set-output name=version::$(node ./.github/workflows/get-version.js)"
    - run: npm ci
    - name: Webpack
      run: npm run dist-m
    - name: Create Release                                # Create an additional release for this version
      id: create_versioned_release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: false # set to false if you do not want to allow updates on existing releases
        name: Release ${{ steps.get-version.outputs.version }} # Use the version in the name
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ./dist/ddb-adventure-muncher-${{ steps.get-version.outputs.version }}-mac.dmg
        tag: ${{ steps.get-version.outputs.version }} # Use the version as the tag
    - name: Rename output
      run: mv ./dist/ddb-adventure-muncher-${{ steps.get-version.outputs.version }}-mac.dmg ./dist/ddb-adventure-muncher-mac.dmg
    - name: Create Latest Release
      id: create_latest_release
      uses: ncipollo/release-action@v1
      if: endsWith(github.ref, 'master') # Only update the latest release when pushing to the master branch
      with:
        allowUpdates: true
        name: Latest
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ./dist/ddb-adventure-muncher-mac.dmg
        tag: latest
    # - name: Discord notification
    #   env:
    #     DISCORD_WEBHOOK: ${{ secrets.DISCORD_HOOK }}
    #     DISCORD_USERNAME: "Release-O-Bot"
    #   uses: Ilshidur/action-discord@0.0.2
    #   with:
    #     args: 'DDB Adventure Muncher ${{ steps.get-version.outputs.version }} has been created.'

